"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path = require("path");
var http = require("http");
var fs = require("fs");
var Transform = require("stream").Transform;
var chalk = require('chalk');
var MSG404 = "not found";
var CODE404 = 404;


if (!fs.constants) {
  fs.constants = {
    R_OK: 4
  };
}

var liteDevServer = function liteDevServer(_ref) {
  var _ref$folder = _ref.folder,
      folder = _ref$folder === undefined ? "public" : _ref$folder,
      _ref$page = _ref.page404,
      page404 = _ref$page === undefined ? null : _ref$page,
      _ref$listen = _ref.listen,
      listen = _ref$listen === undefined ? 3000 : _ref$listen,
      _ref$liveReload = _ref.liveReload,
      liveReload = _ref$liveReload === undefined ? true : _ref$liveReload,
      _ref$webSocketPort = _ref.webSocketPort,
      webSocketPort = _ref$webSocketPort === undefined ? 8080 : _ref$webSocketPort,
      _ref$watchFolders = _ref.watchFolders,
      watchFolders = _ref$watchFolders === undefined ? ["public"] : _ref$watchFolders,
      _ref$autoInjectClient = _ref.autoInjectClientJS,
      autoInjectClientJS = _ref$autoInjectClient === undefined ? true : _ref$autoInjectClient,
      _ref$proxy = _ref.proxy,
      proxy = _ref$proxy === undefined ? [] : _ref$proxy,
      _ref$liveReloadDelay = _ref.liveReloadDelay,
      liveReloadDelay = _ref$liveReloadDelay === undefined ? 0 : _ref$liveReloadDelay,
      _ref$historyApiFallba = _ref.historyApiFallback,
      historyApiFallback = _ref$historyApiFallba === undefined ? false : _ref$historyApiFallba,
      _ref$reloadDelayOnCli = _ref.reloadDelayOnClient,
      reloadDelayOnClient = _ref$reloadDelayOnCli === undefined ? 100 : _ref$reloadDelayOnCli,
      _ref$giveDefaultPage = _ref.giveDefaultPage,
      giveDefaultPage = _ref$giveDefaultPage === undefined ? true : _ref$giveDefaultPage,
      _ref$defaultPageFirst = _ref.defaultPageFirst,
      defaultPageFirst = _ref$defaultPageFirst === undefined ? "index.html" : _ref$defaultPageFirst,
      _ref$defaultPageSecon = _ref.defaultPageSecond,
      defaultPageSecond = _ref$defaultPageSecon === undefined ? "index.htm" : _ref$defaultPageSecon,
      _ref$serverName = _ref.serverName,
      serverName = _ref$serverName === undefined ? "liteDevServer" : _ref$serverName,
      _ref$pathRewrite = _ref.pathRewrite,
      pathRewrite = _ref$pathRewrite === undefined ? null : _ref$pathRewrite;

  var clientScript = fs.readFileSync(__dirname + "/client.js", 'utf8').replace(/webSocketPort/g, webSocketPort).replace(/reloadDelay/g, reloadDelayOnClient);
  var _transform = function _transform(chunk, enc, cb) {
    if (autoInjectClientJS) {
      var newChunk = (chunk + "").replace(/(<head>)/, "$1 \n<script>" + clientScript + "</script>");
      this.push(newChunk);
    } else this.push(chunk);
    cb();
  };
  var wss = null;
  var watchers = [];
  if (liveReload) {
    var EventEmitter = require("events");
    var liveReloadEM = new EventEmitter();
    var ws = require("ws");
    wss = new ws.Server({ port: webSocketPort });
    wss.on("connection", function (connection) {
      console.log("\nlite-dev-server: The WebSocket connection is established successfully");
      var reloadHandler = function reloadHandler() {
        connection.send("reload page");
      };
      liveReloadEM.on("reload", reloadHandler);
      connection.on("close", function () {
        liveReloadEM.removeListener("reload", reloadHandler);
      });
    });
    watchFolders = watchFolders.filter(function (folder) {
      try {
        fs.accessSync("" + folder);
        return true;
      } catch (err) {
        console.log(chalk.red(err + ""));
        return false;
      }
    });
    console.log(chalk.green("\nwatchFolders " + watchFolders));
    watchFolders.forEach(function (folder) {
      watchers.push(fs.watch("" + folder, { recursive: true }, function () {
        setTimeout(function () {
          liveReloadEM.emit("reload");
        }, liveReloadDelay);
      }));
    });
  }
  if (page404) try {
    fs.accessSync(folder + "/" + page404, fs.constants.R_OK);
  } catch (err) {
    console.log(chalk.red(err + ""));
  }

  var server = http.createServer(function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res) {
      var url, ext, matchedProxy, _pathRewrite, options, request, injectStream;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              url = req.url;
              ext = path.extname(url);

              console.log(chalk.blue("<-- " + req.url + " " + serverName));
              matchedProxy = proxy.find(function (item) {
                return req.url.match(item.path) && item.host && item.port;
              });

              if (!matchedProxy) {
                _context.next = 12;
                break;
              }

              _pathRewrite = matchedProxy.pathRewrite;

              if (_pathRewrite && (typeof _pathRewrite === "undefined" ? "undefined" : (0, _typeof3.default)(_pathRewrite)) === "object") {
                url = url.replace(_pathRewrite.pattern, _pathRewrite.replacement);
              }
              options = {
                hostname: matchedProxy.host,
                port: matchedProxy.port,
                path: url,
                method: req.method,
                headers: req.headers
              };
              request = http.request(options, function (_res) {
                res.writeHead(_res.statusCode, _res.headers);
                _res.pipe(res);
              });

              request.end();
              _context.next = 101;
              break;

            case 12:
              if (pathRewrite) {
                [].concat(pathRewrite).forEach(function (i) {
                  if (i && i.pattern && i.replacement) {
                    url = url.replace(i.pattern, i.replacement);
                  }
                });
              }
              injectStream = new Transform();

              injectStream._transform = _transform;

              if (!(req.url === "/" || historyApiFallback && !ext)) {
                _context.next = 40;
                break;
              }

              _context.prev = 16;
              _context.next = 19;
              return (0, _helpers.giveHtmlFile)(res, folder + "/" + defaultPageFirst, injectStream);

            case 19:
              _context.next = 38;
              break;

            case 21:
              _context.prev = 21;
              _context.t0 = _context["catch"](16);
              _context.prev = 23;
              _context.next = 26;
              return (0, _helpers.giveHtmlFile)(res, folder + "/" + defaultPageSecond, injectStream);

            case 26:
              _context.next = 38;
              break;

            case 28:
              _context.prev = 28;
              _context.t1 = _context["catch"](23);

              console.log(chalk.red(_context.t1 + ""));
              res.statusCode = CODE404;

              if (!page404) {
                _context.next = 37;
                break;
              }

              _context.next = 35;
              return (0, _helpers.giveHtmlFile)(res, folder + "/" + page404, injectStream);

            case 35:
              _context.next = 38;
              break;

            case 37:
              res.end(MSG404);

            case 38:
              _context.next = 101;
              break;

            case 40:
              _context.prev = 40;
              _context.prev = 41;
              _context.next = 44;
              return (0, _helpers.isFile)("" + folder + req.url);

            case 44:
              if (!(ext === ".html" || ext === ".htm")) {
                _context.next = 49;
                break;
              }

              _context.next = 47;
              return (0, _helpers.giveHtmlFile)(res, "" + folder + req.url, injectStream);

            case 47:
              _context.next = 51;
              break;

            case 49:
              _context.next = 51;
              return (0, _helpers.giveFile)(res, "" + folder + req.url, ext);

            case 51:
              _context.next = 89;
              break;

            case 53:
              _context.prev = 53;
              _context.t2 = _context["catch"](41);
              _context.prev = 55;

              if (!giveDefaultPage) {
                _context.next = 83;
                break;
              }

              _context.next = 59;
              return (0, _helpers.isDirectory)("" + folder + req.url);

            case 59:
              _context.prev = 59;
              _context.next = 62;
              return (0, _helpers.giveHtmlFile)(res, "" + folder + req.url + defaultPageFirst, injectStream);

            case 62:
              _context.next = 81;
              break;

            case 64:
              _context.prev = 64;
              _context.t3 = _context["catch"](59);
              _context.prev = 66;
              _context.next = 69;
              return (0, _helpers.giveHtmlFile)(res, "" + folder + req.url + defaultPageSecond, injectStream);

            case 69:
              _context.next = 81;
              break;

            case 71:
              _context.prev = 71;
              _context.t4 = _context["catch"](66);

              console.log(chalk.red(_context.t4 + ""));
              res.statusCode = CODE404;

              if (!page404) {
                _context.next = 80;
                break;
              }

              _context.next = 78;
              return (0, _helpers.giveHtmlFile)(res, folder + "/" + page404, injectStream);

            case 78:
              _context.next = 81;
              break;

            case 80:
              res.end(MSG404);

            case 81:
              _context.next = 84;
              break;

            case 83:
              throw new Error("giveDefaultPage is false");

            case 84:
              _context.next = 89;
              break;

            case 86:
              _context.prev = 86;
              _context.t5 = _context["catch"](55);

              console.log(chalk.red(_context.t5 + ""));

            case 89:
              _context.next = 101;
              break;

            case 91:
              _context.prev = 91;
              _context.t6 = _context["catch"](40);

              console.log(chalk.red(_context.t6 + ""));
              res.statusCode = CODE404;

              if (!page404) {
                _context.next = 100;
                break;
              }

              _context.next = 98;
              return (0, _helpers.giveHtmlFile)(res, folder + "/" + page404, injectStream);

            case 98:
              _context.next = 101;
              break;

            case 100:
              res.end(MSG404);

            case 101:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, undefined, [[16, 21], [23, 28], [40, 91], [41, 53], [55, 86], [59, 64], [66, 71]]);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  server.listen(listen);
  console.log(chalk.green("lite-dev-server listening on port " + server.address().port));
  server.wss = wss;
  server.watchers = watchers;
  server.closeAllWatchers = function () {
    if (watchers && watchers.length) {
      watchers.forEach(function (watcher) {
        return watcher && watcher.close && watcher.close();
      });
    }
  };
  return server;
};

module.exports = liteDevServer;