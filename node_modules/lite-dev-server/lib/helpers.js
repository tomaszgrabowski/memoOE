"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.giveFile = exports.giveHtmlFile = exports.isDirectory = exports.isFile = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = require("fs");
var fsp = require("fs-promise");
var mime = require('mime-types');

var isFile = exports.isFile = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(path) {
    var stats;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fsp.stat(path);

          case 2:
            stats = _context.sent;

            if (stats.isFile()) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", new _promise2.default.reject(Error('this is not file')));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function isFile(_x) {
    return _ref.apply(this, arguments);
  };
}();

var isDirectory = exports.isDirectory = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(path) {
    var stats;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return fsp.stat(path);

          case 2:
            stats = _context2.sent;

            if (stats.isDirectory()) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", new _promise2.default.reject(new Error('this is not directory')));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function isDirectory(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var giveHtmlFile = exports.giveHtmlFile = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(res, path, injectStream) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return fsp.access(path, fs.constants.R_OK);

          case 2:
            _context3.next = 4;
            return isFile(path);

          case 4:
            res.setHeader('Content-Type', 'text/html');
            fs.createReadStream(path).pipe(injectStream).pipe(res);

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function giveHtmlFile(_x3, _x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

var giveFile = exports.giveFile = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(res, path, ext) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return fsp.access(path, fs.constants.R_OK);

          case 2:
            _context4.next = 4;
            return isFile(path);

          case 4:
            res.setHeader('Content-Type', mime.contentType(ext));
            fs.createReadStream(path).pipe(res);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function giveFile(_x6, _x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();